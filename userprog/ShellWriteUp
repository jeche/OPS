Shell.c
-------

	The Shell can be invoked with the following command, < ../userprog/nachos -x shell >. From there you are brought to a prompt where you as the user can invoke nachos userland programs and Scripts. There are 3 utility programs, cat, cp, and echo. "cat" takes in single or multiple filenames as arguments and prints them out. "cp" will take the contents of the first given file and copy them to the second. "echo" takes in a single argument(note arguments are separated as spaces so really just a single word unless you use '-' or '_' for spaces) and prints out the input. This is primarily useful for scripts to see where you are in the execution of a script without having to modify the programs it is calling. Any program can be called with at most 14 arguments, each argument being up to 30 chars in length, scripts can not take any arguments(but any program calls within a script can take 14 arguments). Each line of input prior to the user hitting enter or a '\n' in a script may be at most 120 characters, excluding comments. A script must start with #SCRIPT being in the first line of the file with no spaces, tabs, or newlines before. Comments are defined as any text following a '#' up until a newline, but there must be a space or tab before the '#' if it is in the same line as an invocation of a program or script. The Shell handles irregular tabbing and spacing before a program or script call and betweeen arguments. When a program finishes, the Shell will print out "Process Exited: " with the exit value returned from the program. When a script is invoked, the '--' and "Process Exited: " will not be printed out, once the script has finished the shell will print out "Script Finished" with no exit value and a "--" waiting for user input. The shell also handles for file redirection. To redirect the output of the shell to a file, after the script or program call with arguments has been input into the shell, put a '>' followed by the file you wish to output to. If the file has not been created, the shell will create a new file by the input name, and if it already exists then it will overwrite char by char. Note: if you do redirect to a file that already exists that is longer than the output of the shell, there will be remnents of the old file after the redirection.

